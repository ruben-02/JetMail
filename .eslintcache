[{"F:\\jet-mail\\src\\index.js":"1","F:\\jet-mail\\src\\serviceWorker.js":"2","F:\\jet-mail\\src\\App.js":"3","F:\\jet-mail\\src\\app\\store.js":"4","F:\\jet-mail\\src\\firebase.js":"5","F:\\jet-mail\\src\\features\\chat.js":"6","F:\\jet-mail\\src\\features\\mail.js":"7","F:\\jet-mail\\src\\features\\chatSlice.js":"8","F:\\jet-mail\\src\\features\\mailSlice.js":"9","F:\\jet-mail\\src\\features\\userSlice.js":"10","F:\\jet-mail\\src\\features\\commonSlice.js":"11","F:\\jet-mail\\src\\utilities\\utils.js":"12","F:\\jet-mail\\src\\components\\Mail\\Mail.js":"13","F:\\jet-mail\\src\\components\\Sidebar\\Sidebar.js":"14","F:\\jet-mail\\src\\components\\SendChat\\SendChat.js":"15","F:\\jet-mail\\src\\components\\Header\\Header.js":"16","F:\\jet-mail\\src\\components\\Login\\Login.js":"17","F:\\jet-mail\\src\\components\\EmailList\\EmailList.js":"18","F:\\jet-mail\\src\\components\\Meet\\Meet.js":"19","F:\\jet-mail\\src\\components\\SendMail\\SendMail.js":"20","F:\\jet-mail\\src\\utilities\\common.js":"21","F:\\jet-mail\\src\\utilities\\crypt.js":"22","F:\\jet-mail\\src\\components\\Loading\\Loading.js":"23","F:\\jet-mail\\src\\components\\SidebarOption\\SidebarOption.js":"24","F:\\jet-mail\\src\\components\\SidebarChatrecent\\SidebarChatrecent.js":"25","F:\\jet-mail\\src\\components\\EmailRow\\EmailRow.js":"26","F:\\jet-mail\\src\\components\\Section\\Section.js":"27"},{"size":644,"mtime":1665611612000,"results":"28","hashOfConfig":"29"},{"size":5141,"mtime":1665611612000,"results":"30","hashOfConfig":"29"},{"size":4150,"mtime":1665611612000,"results":"31","hashOfConfig":"29"},{"size":416,"mtime":1665611612000,"results":"32","hashOfConfig":"29"},{"size":685,"mtime":1711788489615,"results":"33","hashOfConfig":"29"},{"size":739,"mtime":1665611612000,"results":"34","hashOfConfig":"29"},{"size":547,"mtime":1665611612000,"results":"35","hashOfConfig":"29"},{"size":950,"mtime":1665611612000,"results":"36","hashOfConfig":"29"},{"size":761,"mtime":1665611612000,"results":"37","hashOfConfig":"29"},{"size":466,"mtime":1665611612000,"results":"38","hashOfConfig":"29"},{"size":451,"mtime":1665611612000,"results":"39","hashOfConfig":"29"},{"size":3767,"mtime":1665611612000,"results":"40","hashOfConfig":"29"},{"size":10825,"mtime":1714372846613,"results":"41","hashOfConfig":"29"},{"size":9210,"mtime":1714371518967,"results":"42","hashOfConfig":"29"},{"size":7799,"mtime":1665611612000,"results":"43","hashOfConfig":"29"},{"size":3469,"mtime":1711788145391,"results":"44","hashOfConfig":"29"},{"size":1709,"mtime":1665611612000,"results":"45","hashOfConfig":"29"},{"size":5503,"mtime":1665611612000,"results":"46","hashOfConfig":"29"},{"size":4480,"mtime":1665611612000,"results":"47","hashOfConfig":"29"},{"size":10594,"mtime":1676750660000,"results":"48","hashOfConfig":"29"},{"size":284,"mtime":1665611612000,"results":"49","hashOfConfig":"29"},{"size":901,"mtime":1665611612000,"results":"50","hashOfConfig":"29"},{"size":366,"mtime":1665611612000,"results":"51","hashOfConfig":"29"},{"size":594,"mtime":1665611612000,"results":"52","hashOfConfig":"29"},{"size":1375,"mtime":1665611612000,"results":"53","hashOfConfig":"29"},{"size":3537,"mtime":1665611612000,"results":"54","hashOfConfig":"29"},{"size":508,"mtime":1665611612000,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"7rufs",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"58"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"F:\\jet-mail\\src\\index.js",[],["121","122"],"F:\\jet-mail\\src\\serviceWorker.js",[],"F:\\jet-mail\\src\\App.js",["123"],"import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header/Header';\r\nimport Sidebar from './components/Sidebar/Sidebar';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport Mail from './components/Mail/Mail';\r\nimport EmailList from './components/EmailList/EmailList';\r\nimport SendMail from './components/SendMail/SendMail';\r\nimport SendChat from './components/SendChat/SendChat';\r\nimport Login from \"./components/Login/Login\"\r\nimport { selectSendMessageIsOpen } from './features/mail';\r\nimport { selectSendChatIsOpen } from './features/chat';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectUser, login } from './features/userSlice';\r\nimport { auth, db } from './firebase';\r\nimport Meet from './components/Meet/Meet';\r\nimport { selectShowSidebar } from './features/commonSlice';\r\nimport { getQueryStatement, processMailData } from './utilities/utils';\r\n\r\nfunction App() {\r\n\r\n  const sendMessageIsOpen = useSelector(selectSendMessageIsOpen);\r\n  const sendChatIsOpen = useSelector(selectSendChatIsOpen);\r\n  const user = useSelector(selectUser);\r\n  const showSideBar = useSelector(selectShowSidebar)\r\n  const dispatch = useDispatch();\r\n  \r\n\r\n  const [emails,setEmails] = useState([])\r\n  const [selectedSideBarItem, setSelectedSideBarItem] = useState(0)// 0-> Inbox, 2-> Starred, etc\r\n  const [selectedLabelItem, setSelectedLabelItem] = useState(0)// 0-> Primary, 1-> Social, 2->Promotions\r\n  const [emailReff, setEmailReff] = useState(null)\r\n  const [searchQuery, setSearchQuery] = useState()\r\n\r\n  const getMails = () => {\r\n    let emailRef = getQueryStatement(selectedSideBarItem,selectedLabelItem)\r\n    setEmailReff(emailRef)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(searchQuery && searchQuery.length > 0){\r\n      const m = db.collection('emails')\r\n      .where('to','==',auth.currentUser.email)\r\n      .where('searchableKeywords','array-contains',searchQuery)\r\n      .orderBy('timestamp','desc')\r\n      .onSnapshot(snapshot => {\r\n        setEmails(snapshot.docs.map(doc => processMailData(doc) ))\r\n      })\r\n      \r\n      return () => {\r\n        console.log('search clean up')\r\n        m()\r\n      }\r\n    }\r\n    else if(emailReff){\r\n      console.log('----emailReff=> about to snapshot')\r\n      const m = emailReff.onSnapshot(snapshot => {\r\n        setEmails([...snapshot.docs.map(doc => processMailData(doc) )])\r\n      })\r\n      \r\n      return () => {\r\n        console.log('----emailReff=> calling cleanup')\r\n        m()\r\n        setEmails([])\r\n      }\r\n    }\r\n  }, [emailReff,searchQuery])\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged(user => { \r\n      if (user) {\r\n        dispatch(\r\n          login({\r\n            displayName: user.displayName,\r\n            email: user.email,\r\n            photoUrl: user.photoURL\r\n          })\r\n        );\r\n        getMails()\r\n      }\r\n    });\r\n  }, [selectedSideBarItem,selectedLabelItem]);\r\n  \r\n  return (\r\n    <Router>\r\n      {!user ? (\r\n        <Login />\r\n      ): (\r\n        <div className=\"app\">\r\n        <Header searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\r\n  \r\n        <div className=\"app__body\">\r\n          {showSideBar && <Sidebar listLength={emails.length} selectedSideBarItem={selectedSideBarItem} setSelectedSideBarItem={setSelectedSideBarItem} />}\r\n  \r\n          <Switch>\r\n            <Route path=\"/mail\">\r\n              <Mail />\r\n            </Route>\r\n            <Route path=\"/meet/single/:userMail\">\r\n              <Meet />\r\n            </Route>\r\n            <Route path=\"/meet/conference/:userMail\">\r\n              <Meet />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              \r\n              <EmailList \r\n                emails={emails} \r\n                selectedLabelItem={selectedLabelItem}\r\n                setSelectedLabelItem={setSelectedLabelItem}\r\n                getMails={getMails}\r\n              />\r\n            </Route>\r\n          </Switch>\r\n  \r\n        </div>\r\n        \r\n      {sendChatIsOpen && <SendChat />}\r\n      {sendMessageIsOpen && <SendMail />}\r\n      </div>\r\n      )}\r\n\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","F:\\jet-mail\\src\\app\\store.js",[],"F:\\jet-mail\\src\\firebase.js",["124"],"import firebase from 'firebase'\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDACCqp7s9PprxQvu8scXes3OGlBlXH3wc\",\r\n  authDomain: \"ruben-jetmail.firebaseapp.com\",\r\n  databaseURL: \"https://ruben-jetmail-default-rtdb.asia-southeast1.firebasedatabase.app\",\r\n  projectId: \"ruben-jetmail\",\r\n  storageBucket: \"ruben-jetmail.appspot.com\",\r\n  messagingSenderId: \"763169299392\",\r\n  appId: \"1:763169299392:web:c4b96d541e4ad29b3c4625\"\r\n};\r\n\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\r\nconst db = firebase.firestore()\r\nconst auth = firebase.auth()\r\nconst storage = firebase.storage()\r\nconst provider = new firebase.auth.GoogleAuthProvider()\r\n\r\nexport { db,auth,provider,storage }","F:\\jet-mail\\src\\features\\chat.js",[],"F:\\jet-mail\\src\\features\\mail.js",[],"F:\\jet-mail\\src\\features\\chatSlice.js",[],"F:\\jet-mail\\src\\features\\mailSlice.js",[],"F:\\jet-mail\\src\\features\\userSlice.js",[],"F:\\jet-mail\\src\\features\\commonSlice.js",[],"F:\\jet-mail\\src\\utilities\\utils.js",["125","126","127","128","129","130","131","132","133","134","135"],"import { auth, db } from \"../firebase\"\r\nimport { generateRoomName } from \"./common\"\r\nimport { decrypt } from \"./crypt\"\r\n\r\nexport function getQueryStatement(selectedSideBarItem,selectedLabelItem){\r\n    let emailRef = db.collection('emails')\r\n  \r\n    // Left side bar\r\n    if(selectedSideBarItem == 0){// received\r\n      emailRef = emailRef.where('to','==',auth.currentUser.email).where('spam','==',false)\r\n    }\r\n    else if(selectedSideBarItem == 1){ // starred\r\n      emailRef = emailRef.where('to','==',auth.currentUser.email).where('starred','==',true).where('spam','==',false)\r\n    }\r\n    else if(selectedSideBarItem == 3){ // marked as imp\r\n      console.log('imp here')\r\n      emailRef = emailRef.where('to','==',auth.currentUser.email).where('important','==',true).where('spam','==',false)\r\n    }\r\n    else if(selectedSideBarItem == 4){// sent by me\r\n      console.log('sentttt by meee')\r\n      emailRef = emailRef.where('from','==',auth.currentUser.email)\r\n    }\r\n    else if(selectedSideBarItem == 6){// spam\r\n      emailRef = emailRef.where('to','==',auth.currentUser.email).where('spam','==',true)\r\n    }\r\n    else{\r\n      emailRef = emailRef.where('to',\"==\",\"somethingThatDoesntExist\")\r\n    }\r\n\r\n    // Label\r\n    if(selectedLabelItem == 0){\r\n      console.log('0 called')\r\n      emailRef = emailRef.where('label','==',\"Primary\")\r\n    }\r\n    else if(selectedLabelItem == 1){\r\n      console.log('1 called')\r\n      emailRef = emailRef.where('label','==',\"Social\")\r\n    }\r\n    else if(selectedLabelItem == 2){\r\n      console.log('2 called')\r\n      emailRef = emailRef.where('label','==',\"Promotions\")\r\n    }\r\n    else{\r\n      emailRef = emailRef.where('label',\"==\",\"somethingThatDoesntExist\")\r\n    }\r\n\r\n\r\n    emailRef = emailRef.orderBy('timestamp','desc')\r\n    \r\n    return emailRef\r\n}\r\n\r\nexport function processMailData(doc){\r\n    return {\r\n        id: doc.id,\r\n        data: {\r\n          ...doc.data(),\r\n          subject: decrypt(\r\n            doc.data().subject,\r\n            generateRoomName(doc.data().to, doc.data().from)\r\n          ),\r\n          message: decrypt(\r\n            doc.data().message,\r\n            generateRoomName(doc.data().to, doc.data().from)\r\n          )\r\n        }, \r\n    }\r\n}\r\n\r\nexport async function toggleStarred(id){\r\n  var current= await db.collection('emails').doc(id).get()\r\n  if(current.data().from == auth.currentUser.email){\r\n    // user trying to star mail sent by self => DENY\r\n    return false\r\n  }\r\n  db.collection('emails').doc(id).set({\r\n      \"starred\": !current.data()[\"starred\"]\r\n    },{merge:true})\r\n  return true\r\n}\r\n\r\nexport async function toggleImportant(id){\r\n  var current= await db.collection('emails').doc(id).get()\r\n  if(current.data().from == auth.currentUser.email){\r\n    // user trying to imp mail sent by self => DENY\r\n    console.log('action deny')\r\n    return false\r\n  }\r\n  db.collection('emails').doc(id).set({\r\n      \"important\": !current.data()[\"important\"]\r\n    },{merge:true})\r\n  return true\r\n}\r\n\r\nexport async function toggleSpam(id){\r\n  var current= await db.collection('emails').doc(id).get()\r\n  if(current.data().from == auth.currentUser.email){\r\n    // user trying to imp mail sent by self => DENY\r\n    return false\r\n  }\r\n  db.collection('emails').doc(id).set({\r\n      \"spam\": !current.data()[\"spam\"]\r\n    },{merge:true})\r\n  return true\r\n}\r\n\r\nexport async function deleteMail(id){\r\n  var current= await db.collection('emails').doc(id).get()\r\n  if(current.data().from === auth.currentUser.email){\r\n    // Only sender can delete the mail\r\n    db.collection('emails').doc(id).delete().then(() => {\r\n      console.log(\"Document successfully deleted!\");\r\n    }).catch((error) => {\r\n      console.error(\"Error removing document: \", error);\r\n    });\r\n  \r\n    return true\r\n  }\r\n  return false\r\n}","F:\\jet-mail\\src\\components\\Mail\\Mail.js",["136","137","138","139","140","141","142","143"],"import React, { useEffect, useState, useRef  } from 'react';\r\nimport styles from './Mail.module.css';\r\nimport { Chip, IconButton } from '@material-ui/core';\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport MoveToInboxIcon from \"@material-ui/icons/MoveToInbox\";\r\nimport NewReleasesIcon from '@material-ui/icons/NewReleases'\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EmailIcon from \"@material-ui/icons/Email\";\r\nimport WatchLaterIcon from \"@material-ui/icons/WatchLater\";\r\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\r\nimport LabelImportantOutlinedIcon from \"@material-ui/icons/LabelImportant\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\"; \r\nimport PrintIcon from \"@material-ui/icons/Print\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { selectOpenMail } from '../../features/mailSlice';\r\nimport { useSelector } from 'react-redux'; \r\nimport { auth, db } from '../../firebase';\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport { deleteMail, toggleImportant, toggleSpam } from '../../utilities/utils';\r\nimport Loading from '../Loading/Loading';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport DoneAllOutlinedIcon from '@material-ui/icons/DoneAllOutlined';\r\n\r\n\r\nfunction Mail() {\r\n    const history = useHistory();\r\n    const selectedMail = useSelector(selectOpenMail);\r\n    const [imp, setImp] = useState(false)\r\n    const [spam, setSpam] = useState(false)\r\n    const [showKeywords, setShowKeywords] = useState(false)\r\n    const componentRef = useRef();\r\n\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n    });\r\n\r\n    useEffect(() => {\r\n        if(!selectedMail){\r\n            history.push(\"/\")\r\n            return\r\n        }\r\n\r\n        //  If receiver open this mail, set its read status as true\r\n        if(selectedMail.from != auth.currentUser.email){\r\n            db.collection('emails').doc(selectedMail.id).set({\r\n                \"read\": true\r\n            },{merge:true})\r\n        }\r\n        setImp(selectedMail.important || false)\r\n        setSpam(selectedMail.spam || false)\r\n    }, [])\r\n\r\n    return(!selectedMail ? <Loading /> : <div className={styles.mail}>\r\n            <div className={styles.mail__tools}>\r\n                <div className={styles.mail__toolsLeft}>\r\n                    <ReactTooltip place=\"bottom\"/>\r\n                        <p data-tip=\"Back\">\r\n                            <IconButton onClick={() => history.push(\"/\")}>\r\n                                <ArrowBackIcon />\r\n                            </IconButton>\r\n                        </p>\r\n                    <ReactTooltip place=\"bottom\"/>\r\n                        <p data-tip=\"Archive\">\r\n                            <IconButton>\r\n                                <MoveToInboxIcon />\r\n                            </IconButton>\r\n                        </p>\r\n                    <ReactTooltip place=\"bottom\"/>\r\n                        <p data-tip=\"Report As Spam\">\r\n                            <IconButton onClick={async (e) => {\r\n                                e.stopPropagation();\r\n                                const result = await toggleSpam(selectedMail.id)\r\n                                if(result) setSpam(!spam)\r\n                                }\r\n                            }>\r\n                                {spam ? <NewReleasesIcon style={{fill: \"red\"}}/> : <NewReleasesIcon /> }\r\n                            </IconButton>\r\n                        </p>\r\n                    <ReactTooltip place=\"bottom\"/>\r\n                        <p data-tip=\"Delete\">\r\n                            <IconButton onClick={(e) => {\r\n                                e.stopPropagation()\r\n                                deleteMail(selectedMail.id).then(result => {\r\n                                    console.log(result)\r\n                                    if(result){\r\n                                        history.push('/')\r\n                                    }\r\n                                    else{\r\n                                        alert('Action Denied')\r\n                                    }\r\n                                })\r\n                            }}>\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                        </p>\r\n                    {/* <ReactTooltip place=\"bottom\"/>\r\n                        <p data-tip=\"Mark as Unread\">\r\n                            <IconButton>\r\n                                <EmailIcon />\r\n                            </IconButton>\r\n                        </p> */}\r\n                    {/* <ReactTooltip place=\"bottom\"/>\r\n                        <p data-tip=\"Snooze\">\r\n                            <IconButton>\r\n                                <WatchLaterIcon />\r\n                            </IconButton>\r\n                        </p> */}\r\n                    {/* <ReactTooltip place=\"bottom\"/>\r\n                        <p data-tip=\"Mark as Read\">\r\n                            <IconButton>\r\n                                <CheckCircleIcon />\r\n                            </IconButton>\r\n                        </p> */}\r\n                    <ReactTooltip place=\"bottom\"/>\r\n                        <p data-tip=\"Mark as Important\">\r\n                            <IconButton onClick={async (e) => {\r\n                                e.stopPropagation();\r\n                                const result = await toggleImportant(selectedMail.id)\r\n                                if(result) setImp(!imp)\r\n                                }\r\n                            }>\r\n                                {imp ? <LabelImportantOutlinedIcon style={{fill: \"orange\"}}/> : <LabelImportantOutlinedIcon /> }\r\n                            </IconButton>\r\n                        </p>\r\n                    <ReactTooltip place=\"bottom\"/>\r\n                        <p data-tip=\"More\">\r\n                            <IconButton>\r\n                                <MoreVertIcon />\r\n                            </IconButton>\r\n                        </p>\r\n                </div>\r\n\r\n                <div className={styles.mail__toolsRight}>\r\n                <div className={styles.mail__toolsRight}>\r\n                    <ReactTooltip place=\"bottom\"/>\r\n                        <span data-tip=\"Print Mail\"> \r\n                            <IconButton onClick={handlePrint}>\r\n                                <PrintIcon />\r\n                            </IconButton>\r\n                        </span>\r\n                    <ReactTooltip place=\"bottom\"/>\r\n                        <span data-tip=\"Pop out\">     \r\n                            <IconButton>\r\n                                <ExitToAppIcon />\r\n                            </IconButton>\r\n                        </span>\r\n                </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n            <div className={styles.mail__body} style={{position:\"relative\"}} ref={componentRef}>                \r\n                <div style={{position:\"absolute\",top:\"0px\",right:\"20px\"}}>\r\n                    {selectedMail && selectedMail.read ? \r\n                        selectedMail.from == auth.currentUser.email &&\r\n                        <div style={{padding: \"10px\",}}>\r\n                        <ReactTooltip place=\"left\"/>\r\n                            <span data-tip=\"Read by recipient\">\r\n                            <DoneAllOutlinedIcon \r\n                                style={{color:\"blue\"}}\r\n                            />\r\n                            </span>\r\n                        </div>\r\n                        :\r\n                        selectedMail.from == auth.currentUser.email &&\r\n                        <div style={{ padding: \"10px\" }}>\r\n                            {/* Unread by recipient */}\r\n                        <ReactTooltip place=\"left\"/>\r\n                            <span data-tip=\"Delivered to recipient\">\r\n                            <DoneAllOutlinedIcon \r\n                                style={{color:\"darkgray\"}}\r\n                            />\r\n                            </span>\r\n                        </div>\r\n                    }\r\n                </div>\r\n\r\n                <div className={styles.mail__bodyHeader}>\r\n                    <h2>{selectedMail?.subject}</h2>\r\n                    {imp ? <LabelImportantOutlinedIcon style={{fill: \"orange\"}}/> : <LabelImportantOutlinedIcon /> }\r\n                    <p>{selectedMail?.title}</p> \r\n                    <p className={styles.mail__time}>{selectedMail?.time}</p>\r\n                </div>    \r\n                <div className={styles.mail__message}>\r\n                        <span \r\n                            onClick={() => setShowKeywords(!showKeywords)}\r\n                            style={{ display:'flex',justifyContent:'flex-end',color:'blue',fontWeight:'bolder',textDecoration:'underline',cursor:'pointer' }}>\r\n                                {showKeywords ? 'Hide' : 'Show'} keywords\r\n                        </span>\r\n                    <p>{ReactHtmlParser(selectedMail?.description)}</p>\r\n                    <br></br>\r\n                    {selectedMail && selectedMail.attachments && selectedMail.attachments.length > 0 && \r\n                        <div>\r\n                            <h3>Attachments</h3>\r\n                            {selectedMail.attachments.map(attach => {\r\n                                return <div>\r\n                                    <br></br>\r\n                                    <a target=\"_blank\" href={attach}>{attach}</a>\r\n                                </div>\r\n                            })}\r\n                        </div>\r\n                    }\r\n\r\n                </div>\r\n                <br></br>\r\n                \r\n                \r\n                {showKeywords && <div style={{\r\n                    display: 'flex',\r\n                    flexWrap: 'wrap',\r\n                    listStyle: 'none',\r\n                    padding: '5px',\r\n                    margin: 0,\r\n                    position:'fixed',\r\n                    bottom:'3vh',\r\n                    alignItems:'center',\r\n                    maxHeight:'10vh',\r\n                    overflow:'auto'\r\n                }}>\r\n                    {selectedMail.searchableKeywords.map((keyword,index) => {\r\n                        return <li key={index}>\r\n                            <Chip\r\n                                label={keyword}\r\n                                style={{ marginBottom:'5px',marginRight:'3px' }}\r\n                            />\r\n                        </li>\r\n                    })}\r\n                    \r\n                    \r\n                    \r\n                </div>}\r\n            </div>\r\n        </div>\r\n        );\r\n}\r\n\r\nexport default Mail\r\n","F:\\jet-mail\\src\\components\\Sidebar\\Sidebar.js",["144","145","146","147","148","149","150","151","152","153","154","155"],"import React, { useRef, useEffect } from 'react';\r\nimport styles from './Sidebar.module.css';\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport InboxIcon from \"@material-ui/icons/Inbox\"; \r\nimport { Button, IconButton, Collapse } from '@material-ui/core';\r\nimport SidebarOption from '../SidebarOption/SidebarOption';\r\nimport StarIcon from \"@material-ui/icons/Star\";\r\nimport LabelImportantIcon from \"@material-ui/icons/LabelImportant\";\r\nimport NearMeIcon from \"@material-ui/icons/NearMe\";\r\nimport NoteIcon from \"@material-ui/icons/Note\";\r\nimport NewReleasesIcon from '@material-ui/icons/NewReleases';\r\nimport VideoCallIcon from '@material-ui/icons/VideoCall';\r\nimport ArrowDropDown from \"@material-ui/icons/ArrowDropDown\";\r\nimport { openSendMessage } from '../../features/mail';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { openSendChat } from '../../features/chat';\r\nimport { useState } from 'react';\r\nimport { useSelector } from \"react-redux\"\r\nimport { selectUser } from '../../features/userSlice';\r\n\r\n// for modal\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport { auth, db } from '../../firebase';\r\nimport SidebarChatrecent from '../SidebarChatrecent/SidebarChatrecent'\r\n\r\nfunction Sidebar({selectedSideBarItem,setSelectedSideBarItem,listLength}) {\r\n\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    //variable for opening chat collapse from recent chat person\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    //variable for opening meet collapse from recent chat person\r\n    const [isOpenmeet, setIsOpenmeet] = useState(false);\r\n    //variable for opening dialogbox for chat with new person\r\n    const [Openchatnew, setOpenchatnew] = useState(false);\r\n    //creating a refernce for TextField Component in dialogbox\r\n    const valueRef = useRef('') \r\n    // function as it's name says\r\n    const checkIfEmailExists = async (email) => {\r\n        const snapshot = await db.collection('users').where('email','==',email).limit(1).get()\r\n        console.log(snapshot.empty)\r\n        if(snapshot.empty){\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    // is called when one clicks on start chat in dialog box\r\n    const sendValue = async() => {\r\n        //on clicking button accesing current value of TextField and output it to console\r\n        console.log(valueRef.current.value) \r\n\r\n        // check here if email exist, if exists then open chat window\r\n        const emailExists = await checkIfEmailExists(valueRef.current.value);\r\n\r\n        if(emailExists){  \r\n            //close window\r\n            handleClose();\r\n            //open chat window\r\n            dispatch(openSendChat(valueRef.current.value));\r\n        }\r\n        else{\r\n            //alert showing email doesnt exists\r\n            alert(valueRef.current.value + \" doesn't exist.\");\r\n        }\r\n         \r\n    }\r\n\r\n    // dialogbox handling functions \r\n    const handleClickOpen = () => {\r\n        setOpenchatnew(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpenchatnew(false);\r\n    };\r\n\r\n\r\n    //temp\r\n    const user = useSelector(selectUser);\r\n    // till here temp\r\n\r\n    const [recentChatpersons,setRecentChatpersons] = useState([])\r\n\r\n    useEffect(() => {\r\n        db.collection('users').where('email','==', auth.currentUser.email).onSnapshot(snapshot => {\r\n            setRecentChatpersons(snapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                data: doc.data(),\r\n                recents: doc.data()['recentlychatedwith'],\r\n            })))\r\n        })\r\n        \r\n    },[])\r\n\r\n    return <div className={styles.sidebar}>\r\n            <Button \r\n                name = \"composebtnK\"\r\n                startIcon={<AddIcon fontsize=\"large\"/>}\r\n                className={styles.sidebar_compose}\r\n                onClick={() => dispatch(openSendMessage())}\r\n            >\r\n                Compose\r\n            </Button>\r\n\r\n            <SidebarOption setSelectedSideBarItem={setSelectedSideBarItem} index={0} selected={selectedSideBarItem == 0} Icon={InboxIcon} title=\"Inbox\"\r\n             number={selectedSideBarItem == 0 ? listLength : ''}  />\r\n            <SidebarOption setSelectedSideBarItem={setSelectedSideBarItem} index={1} selected={selectedSideBarItem == 1} Icon={StarIcon} title=\"Starred\" number={selectedSideBarItem==1 ? listLength : ''} />\r\n            <SidebarOption setSelectedSideBarItem={setSelectedSideBarItem} index={3} selected={selectedSideBarItem == 3} Icon={LabelImportantIcon} title=\"Important\" number={selectedSideBarItem==3 ? listLength : ''} />\r\n            <SidebarOption setSelectedSideBarItem={setSelectedSideBarItem} index={4} selected={selectedSideBarItem == 4} Icon={NearMeIcon} title=\"Sent\" number={selectedSideBarItem==4 ? listLength : ''} />\r\n            {/* <SidebarOption setSelectedSideBarItem={setSelectedSideBarItem} index={5} selected={selectedSideBarItem == 5} Icon={NoteIcon} title=\"Drafts\" number={selectedSideBarItem==5 ? listLength : ''} /> */}\r\n            <SidebarOption setSelectedSideBarItem={setSelectedSideBarItem} index={6} selected={selectedSideBarItem == 6} Icon={NewReleasesIcon} title=\"Spam\" number={selectedSideBarItem==6 ? listLength : ''} />\r\n\r\n            <div className={styles.sidebar_footer}>\r\n            <div className={styles.sidebar_features}>    \r\n                <div>\r\n                    <IconButton>\r\n                        <ArrowDropDown  onClick={() => setIsOpen(!isOpen)}/>  \r\n                    </IconButton> \r\n                Chat \r\n                </div>   \r\n                <div>\r\n                <IconButton>\r\n                        <AddIcon name=\"addChat\" onClick={handleClickOpen} />\r\n                </IconButton>\r\n                    \r\n                        <Dialog open={Openchatnew} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                            <DialogTitle id=\"form-dialog-title\">Start a new Chat</DialogTitle>\r\n                            <DialogContent>\r\n                            <DialogContentText>\r\n                            Type the recipient email to whom you want to chat with:\r\n                            </DialogContentText>\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"name\"\r\n                                label=\"Email Address\"\r\n                                type=\"email\"\r\n                                name=\"mailFieldChat\"\r\n                                //connecting inputRef property of TextField to the valueRef\r\n                                inputRef={valueRef}   \r\n                                fullWidth\r\n                            />\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                            <Button onClick={handleClose} color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button name=\"startChatBtn\" onClick={sendValue} color=\"primary\">\r\n                                Start Chat\r\n                            </Button>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                </div>\r\n            </div>\r\n            <div style={{overflowY: 'auto', maxHeight:'100px',}}>\r\n\r\n            <Collapse in={isOpen}>\r\n\r\n            {/* ,recents:{email, displayName, photoUrl */}\r\n            {/* {JSON.stringify(recentChatpersons)} */}\r\n            {recentChatpersons && recentChatpersons.length > 0 && recentChatpersons[0].recents.map(({displayName, email, photoUrl}) => {\r\n                return  <SidebarChatrecent\r\n                            displayName = {displayName}\r\n                            email={email}\r\n                            // displayName={displayName}\r\n                            photoUrl={photoUrl}\r\n                        />\r\n                     })} \r\n\r\n            </Collapse>\r\n            \r\n            </div>\r\n\r\n            \r\n            <div className={styles.sidebar_features}> \r\n                <div>\r\n                    <IconButton>\r\n                        <ArrowDropDown  onClick={() => setIsOpenmeet(!isOpenmeet)}/>  \r\n                    </IconButton> \r\n                Meet\r\n                </div> \r\n            </div>\r\n            </div>\r\n\r\n            <Collapse in={isOpenmeet}>\r\n                <div className={styles.sidebar_features}>  \r\n                    <div className={styles.sidebar_meet} onClick={() => history.push(`/meet/conference/${parseInt(100000 + Math.random()*(500000))}`)}>\r\n                        <IconButton>\r\n                            <VideoCallIcon  />  \r\n                        </IconButton>\r\n                        New meeting\r\n                    </div>\r\n                </div>\r\n            </Collapse>\r\n        </div>;\r\n}\r\n\r\nexport default Sidebar\r\n","F:\\jet-mail\\src\\components\\SendChat\\SendChat.js",["156","157","158"],"import React, { useEffect, useState } from 'react';\r\nimport styles from './SendChat.module.css';\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { closeSendChat, selectSendChatRecipientmail } from '../../features/chat';\r\nimport { auth, db } from '../../firebase';\r\nimport firebase from 'firebase'\r\nimport { generateRoomName } from '../../utilities/common';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport ScrollToBottom from 'react-scroll-to-bottom';\r\nimport DuoIcon from \"@material-ui/icons/Duo\";\r\nimport { decrypt,encrypt } from '../../utilities/crypt'\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction SendChat() {\r\n\r\n    const recipient_mail = useSelector(selectSendChatRecipientmail);\r\n    // const { register, handleSubmit, watch, errors } = useForm();\r\n    const dispatch = useDispatch();\r\n\r\n    const [chatmsg, setChatmsg] = useState('')\r\n    \r\n    // check which is lexicographically bigger and set docNAme accordingly\r\n    var docName;\r\n    if(auth.currentUser.email < recipient_mail){\r\n        docName = auth.currentUser.email + '-' + recipient_mail;\r\n    }\r\n    else{\r\n        docName = recipient_mail + '-' + auth.currentUser.email;\r\n    }\r\n    \r\n    async function getUserByMail(mail){\r\n        let snapshot = await db.collection('users').where('email','==',mail).limit(1).get()\r\n        let user = snapshot.docs.length == 0 ? null : snapshot.docs.map(doc => ({\r\n            id: doc.id,\r\n            data: doc.data()\r\n        }))[0]\r\n        return user\r\n    }\r\n\r\n    function updateRecentChatArray(user,recipientUser){\r\n        let currentRecentlyArray = user.data.recentlychatedwith || []\r\n        console.log('currentRecentlyArray')\r\n        console.log(currentRecentlyArray)\r\n\r\n        let updatedArray = currentRecentlyArray\r\n        // 3. exclude recipient_mail's object from array\r\n        updatedArray = updatedArray.filter(el => el.email !== recipientUser.data.email)\r\n\r\n        // 4. Add recipientUser at index 0\r\n        updatedArray = [{\r\n            id: recipientUser.id        ,\r\n            email: recipientUser.data.email,\r\n            displayName: recipientUser.data.displayName,\r\n            photoUrl: recipientUser.data.photoUrl\r\n        },...updatedArray]\r\n\r\n        console.log('updatedArray')\r\n        console.log(updatedArray)\r\n\r\n        //5. Update user's recently chat array in db\r\n        db.collection('users')\r\n        .doc(user.id)\r\n        .update({\r\n            recentlychatedwith: updatedArray\r\n        })\r\n        .then(() => console.log('recent array update successful for sender'))\r\n        .catch(e => console.log(JSON.stringify(e)))\r\n    }\r\n        \r\n    const onSubmit =  async () => {\r\n\r\n        // add chat to document \r\n        db.collection('echats')\r\n        .doc(docName)\r\n        .collection('chats').add({\r\n            to: recipient_mail,\r\n            from: auth.currentUser.email,\r\n            message: encrypt(chatmsg, generateRoomName(auth.currentUser.email,recipient_mail)),\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        })\r\n\r\n        // 1. get user from db\r\n        let user = await getUserByMail(auth.currentUser.email)\r\n\r\n        // 2. Get recipient user\r\n        let recipientUser = await getUserByMail(recipient_mail)\r\n\r\n        updateRecentChatArray(user,recipientUser)\r\n        updateRecentChatArray(recipientUser,user)\r\n\r\n        setChatmsg('')\r\n    }\r\n\r\n    const [chats,setChats] = useState([])\r\n\r\n    useEffect(() => {\r\n        db.collection('echats')\r\n        .doc(docName)\r\n        .collection('chats')\r\n        .orderBy('timestamp').onSnapshot(snapshot => {\r\n            setChats(snapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                data: doc.data()\r\n            })))\r\n        })\r\n    },[recipient_mail])\r\n\r\n    return <div style={{\r\n            height:\"350px\",\r\n            position:\"absolute\",\r\n            bottom:\"10px\",\r\n            right:\"50px\",\r\n            backgroundColor:\"white\",\r\n            width:\"250px\",\r\n            boxShadow: \"0px 5px 7px 8px rgba(0,0,0,0.24)\"\r\n        }}>\r\n            {/* {chats.map(({id,data:{from,message,timestamp,to}}) => {\r\n            return <> */}\r\n            <div style={{\r\n                    backgroundColor:\"#404040\",\r\n                    // height:\"10%\",\r\n                    padding:\"5px\"\r\n                }}>\r\n                    <div style={{\r\n                        width:\"100%\",\r\n                        color:\"white\",\r\n                        position:\"relative\",\r\n                        display:'flex',\r\n                        justifyContent:'space-between',\r\n                        alignItems:\"center\"\r\n                    }}\r\n                    >\r\n                        <div style={{ flex:0.85 }}> \r\n                            {recipient_mail} \r\n                        </div>\r\n                        <div>\r\n                            <DuoIcon \r\n                                className={styles.sendChat__close} \r\n                                onClick={() => dispatch(closeSendChat())}\r\n                            />\r\n                            <CloseIcon \r\n                                className={styles.sendChat__close} \r\n                                onClick={() => dispatch(closeSendChat())}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style={{\r\n                    height:\"80%\",\r\n                }}>\r\n                    <ScrollToBottom  className={styles.scrollClass}>\r\n                        {chats.map(({id,data:{from,message,timestamp,to}}) => {\r\n                            return <>\r\n                                <div style={{\r\n                                    maxWidth:\"80%\",\r\n                                    padding:\"10px\",\r\n                                    marginTop:\"10px\",\r\n                                    backgroundColor:\"#f2f2f2\",\r\n                                    float: from === auth.currentUser.email ? \"right\" : \"left\",\r\n                                    clear:\"both\"\r\n                                }}>\r\n                                    {decrypt(message, generateRoomName(auth.currentUser.email,recipient_mail))}\r\n                            </div><br></br>\r\n                            </>\r\n                        })}\r\n                    </ScrollToBottom >\r\n                </div>\r\n                <div style={{\r\n                    height:\"10%\",\r\n                    width:\"100%\"\r\n                }}>\r\n                    <div style={{}}>\r\n                        <hr></hr>\r\n                        <input \r\n                            onKeyPress={(e) => {\r\n                                if(e.key == 'Enter'){\r\n                                    onSubmit()\r\n                                }\r\n                            }}\r\n                            name=\"chatMsgField\"\r\n                            onChange={(e) => setChatmsg(e.target.value)}\r\n                            type=\"text\"\r\n                            value={chatmsg}\r\n                            style={{width:\"80%\",padding:'5px',outline: \"none\",border:\"none\"}}\r\n                        />\r\n                    \r\n                        <div style={{\r\n                                float:\"right\",\r\n                                padding:\"2px\"\r\n                            }}>\r\n                                <SendIcon\r\n                                    name=\"sendChatBtn\"\r\n                                    className={styles.sendChat__close} \r\n                                    onClick={() => onSubmit()}\r\n                                />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        </div>;\r\n}\r\n\r\nexport default SendChat\r\n","F:\\jet-mail\\src\\components\\Header\\Header.js",[],"F:\\jet-mail\\src\\components\\Login\\Login.js",[],"F:\\jet-mail\\src\\components\\EmailList\\EmailList.js",["159","160"],"import React from 'react';\r\nimport styles from './EmailList.module.css';\r\nimport { Checkbox, IconButton } from \"@material-ui/core\";\r\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport KeyboardHideIcon from \"@material-ui/icons/KeyboardHide\";\r\nimport InboxIcon from \"@material-ui/icons/Inbox\";\r\nimport PeopleIcon from \"@material-ui/icons/People\";\r\nimport LocalOfferIcon from \"@material-ui/icons/LocalOffer\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport Section from '../Section/Section';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport EmailRow from '../EmailRow/EmailRow'\r\nimport Loading from '../Loading/Loading';\r\n\r\nfunction EmailList({ emails,selectedLabelItem,setSelectedLabelItem,getMails }) {\r\n    \r\n    return (<div className={styles.emailList}>\r\n            <div className={styles.emailList__settings}>\r\n                <div className={styles.emailList__settingsLeft}>\r\n                    <ReactTooltip place=\"bottom\"/>\r\n                        <span data-tip=\"Select\">\r\n                            <Checkbox />\r\n                        </span>\r\n                    <ReactTooltip place=\"bottom\"/>\r\n                        <span data-tip=\"Select All\">\r\n                            <IconButton>\r\n                                <ArrowDropDownIcon />\r\n                            </IconButton>\r\n                        </span>\r\n                    <ReactTooltip place=\"bottom\"/>\r\n                        <span data-tip=\"Refresh\">\r\n                            <IconButton onClick={getMails}>\r\n                                <RefreshIcon />\r\n                            </IconButton>\r\n                        </span>\r\n                    <ReactTooltip place=\"bottom\"/>\r\n                        <span data-tip=\"More\">\r\n                            <IconButton>\r\n                                <MoreVertIcon />\r\n                            </IconButton>\r\n                        </span>\r\n                </div>\r\n                <div className={styles.emailList__settingsRight}>\r\n                    <ReactTooltip place=\"bottom\"/>\r\n                        <span data-tip=\"Previous Page\">\r\n                            <IconButton>\r\n                                <ChevronLeftIcon />\r\n                            </IconButton>\r\n                        </span>\r\n                    <ReactTooltip place=\"bottom\"/>  \r\n                        <span data-tip=\"Next Page\">          \r\n                            <IconButton>\r\n                                <ChevronRightIcon />\r\n                            </IconButton>\r\n                        </span>\r\n                    <ReactTooltip place=\"bottom\"/>\r\n                        <span data-tip=\"Keyboard\">\r\n                            <IconButton>\r\n                                <KeyboardHideIcon />\r\n                            </IconButton>\r\n                        </span>\r\n                    <ReactTooltip place=\"bottom\"/>\r\n                        <span data-tip=\"Settings\">\r\n                            <IconButton>\r\n                                <SettingsIcon />\r\n                            </IconButton>\r\n                        </span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={styles.emailList__sections} >\r\n                {[\r\n                    {icon:InboxIcon,title:'Primary',color:'red'},\r\n                    {icon:PeopleIcon,title:'Social',color:'#1A73E8'},\r\n                    {icon:LocalOfferIcon,title:'Promotions',color:'green'}\r\n                ].map((obj,index) => {\r\n                    return <Section \r\n                        Icon={obj.icon} \r\n                        title={obj.title}\r\n                        color={obj.color}\r\n                        selected={selectedLabelItem == index} \r\n                        onClick={() => setSelectedLabelItem(index)}\r\n                    />  \r\n                })}\r\n            </div>\r\n\r\n            <div className={styles.emailList__list}>\r\n            {emails.length == 0 ? <Loading /> : \r\n                <div>\r\n                    {emails.map(( {id, data} ) => {\r\n                        return <EmailRow\r\n                            id={id}\r\n                            key={id}\r\n                            title={data.from}\r\n                            subject={data.subject}\r\n                            to={data.to}\r\n                            from={data.from}\r\n                            description={data.message}\r\n                            time={new Date(data.timestamp?.seconds*1000).toUTCString()}\r\n                            starred={data.starred || false}\r\n                            important={data.important || false}\r\n                            read={data.read || false}\r\n                            spam={data.spam || false}\r\n                            searchableKeywords={data.searchableKeywords || []}\r\n                            attachments={data.attachments || []}\r\n                        />\r\n                    })}\r\n                </div>\r\n            }\r\n                {/* <div style={{width:\"100%\",textAlign:\"center\"}}>\r\n                    <button onClick={getMails} className={styles.emailList__more}>More</button>\r\n                </div> */}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EmailList\r\n","F:\\jet-mail\\src\\components\\Meet\\Meet.js",["161"],"import { Button, InputLabel, TextField } from '@material-ui/core';\r\nimport React, { useState } from 'react'\r\n\r\nimport { Jutsu } from 'react-jutsu'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { auth } from '../../firebase'\r\n\r\nconst Meet = () => {\r\n    const history = useHistory();\r\n    const fullUrl = window.location.href\r\n    let meetCode = ''\r\n    let userClient = ''\r\n    let meetPassword = ''\r\n    const currentUser = auth.currentUser\r\n\r\n    if(fullUrl.includes('/meet/single/')){\r\n        userClient = fullUrl.split('/meet/single/')[1]\r\n        if(currentUser.email > userClient){\r\n            meetCode = userClient + '-' + currentUser.email\r\n        }\r\n        else{\r\n            meetCode = currentUser.email + '-' + userClient \r\n        }\r\n        meetPassword = meetCode // temporary\r\n    }else if(fullUrl.includes('/meet/conference/')){\r\n        let confCode = fullUrl.split('/meet/conference/')[1] || ''\r\n        meetCode = confCode\r\n        meetPassword = ''\r\n    }\r\n\r\n\r\n  const [room, setRoom] = useState(meetCode)\r\n  const [name, setName] = useState(currentUser.displayName)\r\n  const [call, setCall] = useState(userClient == '' ? false : true)\r\n  const [password, setPassword] = useState(meetPassword)\r\n\r\n  const handleClick = event => {\r\n    event.preventDefault()\r\n    console.log(room+\" \"+name+\" \"+password)\r\n    if (room && name) setCall(true)\r\n  }\r\n\r\n\r\n\r\n  return <div\r\n    style={{\r\n      display:\"flex\",\r\n      margin:\"0 auto\",\r\n      alignItems:\"center\",\r\n    }}\r\n  >\r\n    {call ? (\r\n      <Jutsu\r\n        roomName={room}\r\n        displayName={name}\r\n        password={password}\r\n        onMeetingEnd={() => history.push('/')}\r\n        loadingComponent={<p>loading ...</p>}\r\n        errorComponent={<p>Oops, something went wrong</p>} />\r\n    ) : (\r\n      <div style={{\r\n        backgroundColor:\"#f2f2f2\",\r\n        display:\"flex\",flexWrap:\"wrap\",flexDirection:\"column\",\r\n        padding:\"10px\",width:\"500px\"\r\n      }}>\r\n        <div style={{ width:\"100%\",textAlign:\"center\",marginBottom:\"30px\" }}>\r\n          <h1>Join the meet!</h1>\r\n        </div>\r\n        \r\n              <br></br>\r\n              <InputLabel htmlFor=\"room\">Enter room name</InputLabel>\r\n              <TextField  id='room' type='text' placeholder='Room' value={room} onChange={(e) => setRoom(e.target.value)} />\r\n              \r\n              <br></br>\r\n              <InputLabel htmlFor=\"name\">Your name</InputLabel>\r\n              <TextField  id='name' type='text' placeholder='Name' value={name} onChange={(e) => setName(e.target.value)} />\r\n              <br></br>\r\n              <InputLabel htmlFor=\"password\">Password(optional)</InputLabel>\r\n              <TextField  id='password' type='text' placeholder='' value={password} onChange={(e) => setPassword(e.target.value)} />\r\n\r\n              <Button variant=\"contained\"  color=\"primary\" onClick={handleClick} type='submit'>\r\n                  Start / Join\r\n              </Button>\r\n\r\n          {/* <form>\r\n            <Paper style={{ padding: 16 }}>\r\n              <Grid container alignItems=\"flex-start\" spacing={2}>\r\n                <Grid item xs={6}>\r\n                  <Field\r\n                    fullWidth\r\n                    required\r\n                    name=\"firstName\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"First Name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Field\r\n                    fullWidth\r\n                    required\r\n                    name=\"lastName\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Last Name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Field\r\n                    name=\"email\"\r\n                    fullWidth\r\n                    required\r\n                    component={TextField}\r\n                    type=\"email\"\r\n                    label=\"Email\"\r\n                  />\r\n                </Grid>\r\n                \r\n                <Grid item style={{ marginTop: 16 }}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Paper>\r\n          </form> */}\r\n      </div>\r\n    )}\r\n  </div>\r\n}\r\n\r\nexport default Meet","F:\\jet-mail\\src\\components\\SendMail\\SendMail.js",["162","163","164","165","166"],"import React, { useState } from 'react';\r\nimport styles from './SendMail.module.css';\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport { Button, Chip } from '@material-ui/core';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { closeSendMessage } from '../../features/mail';\r\nimport { auth, db, storage } from '../../firebase';\r\nimport firebase from 'firebase'\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { encrypt } from '../../utilities/crypt';\r\nimport { generateRoomName } from '../../utilities/common';\r\nimport axios from 'axios';\r\n \r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nvar keyword_extractor = require(\"keyword-extractor\");\r\n\r\n\r\nfunction SendMail() {\r\n\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n    const dispatch = useDispatch()\r\n    const [addData, setVal] = useState(\"\");\r\n    const [option,setOption] = useState(\"Primary\");\r\n\r\n    //For file\r\n    const [fileUrls, setFileUrls] = useState([])\r\n    function handleFileChange(e) {\r\n        handleUpload(e.target.files[0])\r\n    }\r\n\r\n    function handleUpload(file) {\r\n        console.log('About to upload')\r\n        console.log(file)\r\n        // const fileName = file.name.replace(\" \",\"\") + \"-\" + new Date().getTime().toString()\r\n        const fileName = file.name.replace(\" \",\"\")\r\n        // const fileName = new Date().getTime().toString()\r\n        const uploadTask = storage.ref(`/images/${fileName}`).put(file);\r\n        uploadTask.on(\"state_changed\", console.log, console.error, () => {\r\n          storage\r\n            .ref(\"images\")\r\n            .child(fileName)\r\n            .getDownloadURL()\r\n            .then((url) => {\r\n              setFileUrls([...fileUrls,url])\r\n            //   setVal(addData + `<br></br><a href=${url}>attachment:${fileName}</a><br></br>${' '}`)\r\n            });\r\n        });\r\n        \r\n    }\r\n    /////////\r\n    \r\n    \r\n\r\n    const sendEmail = async(msg) =>{\r\n        console.log('addData')\r\n        let cleanMsg = addData.replace( /(<([^>]+)>)/ig, '')\r\n        \r\n        var myHeaders = new Headers();\r\n        myHeaders.append(\"apikey\", \"1HkctVAY5b349v6dETDY1jkGTHnuZXSx\");\r\n        myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n        var raw = JSON.stringify({\"text\":cleanMsg});\r\n\r\n        var requestOptions = {\r\n            method: 'POST',\r\n            redirect: 'follow',\r\n            headers: myHeaders,\r\n            body: raw,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        var resp = await fetch(\"https://api.apilayer.com/spamchecker\", requestOptions)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                console.log(result)\r\n                return result['is_spam']\r\n            })\r\n        .catch(error => console.log('error', error));\r\n\r\n        console.log(resp);\r\n        return resp;\r\n    }\r\n\r\n    const handleChange = (e, editor) => {\r\n        var data = editor.getData();\r\n        setVal(data);\r\n    }\r\n    \r\n    const handleChangeinType = (event) => {\r\n        setOption(event.target.value)\r\n        console.log(`Option selected:`, option);\r\n    }\r\n\r\n    const generateKeywords = async (formData) => {\r\n        let searchableKeywords = [auth.currentUser.email,...formData.subject.split(' ')]\r\n        let prev = ''\r\n        for(var i=0;i<formData.subject.length;i++){\r\n            prev = prev  + formData.subject.charAt(i)\r\n            searchableKeywords.push(prev)\r\n        }\r\n        // top n Keywords from the body \r\n        let cleanMsg = addData.replace( /(<([^>]+)>)/ig, '')\r\n\r\n        let keywords = keyword_extractor.extract(cleanMsg,{\r\n            language:\"english\",\r\n            remove_digits: true,\r\n            return_changed_case:true,\r\n            remove_duplicates: true\r\n        })\r\n        searchableKeywords = [...searchableKeywords,...keywords]\r\n\r\n        // remove all duplicates from the array irrespective of case\r\n        // searchableKeywords = searchableKeywords.filter((item, index) => {\r\n        //     return searchableKeywords.indexOf(item.toLowerCase()) === index;\r\n        // })\r\n\r\n        console.log(searchableKeywords)\r\n        return searchableKeywords\r\n    }\r\n    \r\n    const checkIfEmailExists = async (email) => {\r\n        const snapshot = await db.collection('users').where('email','==',email).limit(1).get()\r\n        console.log(snapshot.empty)\r\n\r\n        if(snapshot.empty || email == auth.currentUser.email){\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n    \r\n    const onSubmit = async (formData) => {\r\n        // check here if email exist (for now just setting it to true)\r\n        if(addData == \"\")\r\n        {\r\n            return; \r\n        }\r\n        const emailExists = await checkIfEmailExists(formData.to) \r\n    \r\n        // console.log(await generateKeywords(formData))\r\n\r\n        if(emailExists){   \r\n            db.collection('emails').add({\r\n                to: formData.to,\r\n                from: auth.currentUser.email,\r\n                subject:  encrypt(formData.subject, generateRoomName(auth.currentUser.email,formData.to)),\r\n                message: encrypt(addData, generateRoomName(auth.currentUser.email,formData.to)),\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                searchableKeywords: await generateKeywords(formData),\r\n                read: false,\r\n                starred: false,\r\n                important: false,\r\n                spam: await sendEmail(addData),\r\n                label: option,\r\n                attachments: fileUrls\r\n            })\r\n            dispatch(closeSendMessage())\r\n        }\r\n        else{\r\n            console.log(formData.to + \" doesn't exist.\")\r\n            toast.error(\"Cannot send mail to \"+formData.to)\r\n            // toast.success(\"Mail sent successfully.\")\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n\r\n    return <>\r\n    <ToastContainer />\r\n        <div className={styles.sendMail}>\r\n            \r\n            <div className={styles.sendMail__header}>\r\n                <h3>New Mail</h3>\r\n                <CloseIcon \r\n                    className={styles.sendMail__close} \r\n                    onClick={() => dispatch(closeSendMessage())}\r\n                />\r\n            </div>\r\n        \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <input \r\n                    name=\"to\"\r\n                    placeholder=\"To\"\r\n                    type=\"email\"\r\n                    ref={register({ required: true })} \r\n                />\r\n                {errors.to && <p className={styles.sendMail__error}>To is required</p>}\r\n                <input\r\n                    name=\"subject\"\r\n                    placeholder=\"Subject\"\r\n                    type=\"text\"\r\n                    ref={register({ required: true })} \r\n                />\r\n                {errors.to && <p className={styles.sendMail__error}>Subject is required</p>}\r\n\r\n            \r\n                    <CKEditor\r\n                        editor={ ClassicEditor } \r\n                        // styles={{overflow:\"auto\",back}}\r\n                        id=\"body_ckeditor\"\r\n                        data={addData}  \r\n                        onChange={handleChange}\r\n                    />\r\n                    <div>\r\n                        {/* {fileUrls.map(u => <a href={u} style={{marginRight:\"2px\"}} >{u}</a>)} */}\r\n\r\n                        \r\n\r\n\r\n\r\n\r\n\r\n                    </div>\r\n            \r\n                {errors.to && <p className={styles.sendMail__error}>Message is required</p>}\r\n\r\n                <div className={styles.sendMail__buttons}>\r\n                    <div className={styles.sendMail__buttons__left}>\r\n                        <Select\r\n                            labelId=\"demo-simple-select-filled-label\"\r\n                            id=\"demo-simple-select-filled\"\r\n                            value={option}\r\n                            name='option' \r\n                            // className=\"sendMail__sendtype\"\r\n                            style={{\"backgroundColor\":\"white\"}}\r\n                            onChange={handleChangeinType}\r\n                            >\r\n                            <MenuItem  value=\"Primary\">Primary</MenuItem>\r\n                            <MenuItem value=\"Social\">Social</MenuItem>\r\n                            <MenuItem value=\"Promotions\">Promotions</MenuItem>\r\n                        </Select>\r\n                        <div>\r\n                            <input\r\n                                type=\"file\"\r\n                                hidden\r\n                                id=\"file-upload\"\r\n                                onChange={handleFileChange} \r\n                            />\r\n                            <label htmlFor=\"file-upload\">\r\n                                <AttachFileIcon \r\n                                style={{color:'white',cursor:'pointer'}} \r\n                                />\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n\r\n                        {fileUrls.length > 0 && <div style={{\r\n                            display: 'flex',\r\n                            flexWrap: 'wrap',\r\n                            listStyle: 'none',\r\n                            flex:1,\r\n                            height:'30px',overflow:'auto'\r\n                        }}>\r\n                            {fileUrls.map((k,index) => {\r\n                                return <li key={index}>\r\n                                    <Chip\r\n                                        onClick={() => window.open(k)}\r\n                                        label={k}\r\n                                        style={{ marginBottom:'2px',marginRight:'3px',maxWidth:'100px' }}\r\n                                    />\r\n                                </li>\r\n                            })}\r\n                        </div>}\r\n                    {/* </div> */}\r\n\r\n                    <Button \r\n                        className=\"sendMail__send\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        name=\"mailClick\"\r\n                    >Send</Button>\r\n\r\n                   \r\n\r\n                </div>\r\n            </form> \r\n        </div>\r\n    </>\r\n}\r\n\r\nexport default SendMail\r\n","F:\\jet-mail\\src\\utilities\\common.js",[],"F:\\jet-mail\\src\\utilities\\crypt.js",[],"F:\\jet-mail\\src\\components\\Loading\\Loading.js",[],"F:\\jet-mail\\src\\components\\SidebarOption\\SidebarOption.js",[],"F:\\jet-mail\\src\\components\\SidebarChatrecent\\SidebarChatrecent.js",[],["167","168"],"F:\\jet-mail\\src\\components\\EmailRow\\EmailRow.js",[],"F:\\jet-mail\\src\\components\\Section\\Section.js",[],{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","severity":1,"message":"174","line":86,"column":6,"nodeType":"175","endLine":86,"endColumn":45,"suggestions":"176"},{"ruleId":"177","severity":1,"message":"178","line":14,"column":7,"nodeType":"179","messageId":"180","endLine":14,"endColumn":18},{"ruleId":"181","severity":1,"message":"182","line":9,"column":28,"nodeType":"183","messageId":"184","endLine":9,"endColumn":30},{"ruleId":"181","severity":1,"message":"182","line":12,"column":33,"nodeType":"183","messageId":"184","endLine":12,"endColumn":35},{"ruleId":"181","severity":1,"message":"182","line":15,"column":33,"nodeType":"183","messageId":"184","endLine":15,"endColumn":35},{"ruleId":"181","severity":1,"message":"182","line":19,"column":33,"nodeType":"183","messageId":"184","endLine":19,"endColumn":35},{"ruleId":"181","severity":1,"message":"182","line":23,"column":33,"nodeType":"183","messageId":"184","endLine":23,"endColumn":35},{"ruleId":"181","severity":1,"message":"182","line":31,"column":26,"nodeType":"183","messageId":"184","endLine":31,"endColumn":28},{"ruleId":"181","severity":1,"message":"182","line":35,"column":31,"nodeType":"183","messageId":"184","endLine":35,"endColumn":33},{"ruleId":"181","severity":1,"message":"182","line":39,"column":31,"nodeType":"183","messageId":"184","endLine":39,"endColumn":33},{"ruleId":"181","severity":1,"message":"182","line":72,"column":26,"nodeType":"183","messageId":"184","endLine":72,"endColumn":28},{"ruleId":"181","severity":1,"message":"182","line":84,"column":26,"nodeType":"183","messageId":"184","endLine":84,"endColumn":28},{"ruleId":"181","severity":1,"message":"182","line":97,"column":26,"nodeType":"183","messageId":"184","endLine":97,"endColumn":28},{"ruleId":"177","severity":1,"message":"185","line":8,"column":8,"nodeType":"179","messageId":"180","endLine":8,"endColumn":17},{"ruleId":"177","severity":1,"message":"186","line":9,"column":8,"nodeType":"179","messageId":"180","endLine":9,"endColumn":22},{"ruleId":"177","severity":1,"message":"187","line":10,"column":8,"nodeType":"179","messageId":"180","endLine":10,"endColumn":23},{"ruleId":"181","severity":1,"message":"188","line":46,"column":30,"nodeType":"183","messageId":"184","endLine":46,"endColumn":32},{"ruleId":"173","severity":1,"message":"189","line":53,"column":8,"nodeType":"175","endLine":53,"endColumn":10,"suggestions":"190"},{"ruleId":"181","severity":1,"message":"182","line":158,"column":43,"nodeType":"183","messageId":"184","endLine":158,"endColumn":45},{"ruleId":"181","severity":1,"message":"182","line":168,"column":43,"nodeType":"183","messageId":"184","endLine":168,"endColumn":45},{"ruleId":"191","severity":1,"message":"192","line":201,"column":37,"nodeType":"193","endLine":201,"endColumn":70},{"ruleId":"177","severity":1,"message":"194","line":10,"column":8,"nodeType":"179","messageId":"180","endLine":10,"endColumn":16},{"ruleId":"177","severity":1,"message":"195","line":87,"column":11,"nodeType":"179","messageId":"180","endLine":87,"endColumn":15},{"ruleId":"181","severity":1,"message":"182","line":113,"column":116,"nodeType":"183","messageId":"184","endLine":113,"endColumn":118},{"ruleId":"181","severity":1,"message":"182","line":114,"column":42,"nodeType":"183","messageId":"184","endLine":114,"endColumn":44},{"ruleId":"181","severity":1,"message":"182","line":115,"column":116,"nodeType":"183","messageId":"184","endLine":115,"endColumn":118},{"ruleId":"181","severity":1,"message":"182","line":115,"column":181,"nodeType":"183","messageId":"184","endLine":115,"endColumn":183},{"ruleId":"181","severity":1,"message":"182","line":116,"column":116,"nodeType":"183","messageId":"184","endLine":116,"endColumn":118},{"ruleId":"181","severity":1,"message":"182","line":116,"column":193,"nodeType":"183","messageId":"184","endLine":116,"endColumn":195},{"ruleId":"181","severity":1,"message":"182","line":117,"column":116,"nodeType":"183","messageId":"184","endLine":117,"endColumn":118},{"ruleId":"181","severity":1,"message":"182","line":117,"column":180,"nodeType":"183","messageId":"184","endLine":117,"endColumn":182},{"ruleId":"181","severity":1,"message":"182","line":119,"column":116,"nodeType":"183","messageId":"184","endLine":119,"endColumn":118},{"ruleId":"181","severity":1,"message":"182","line":119,"column":185,"nodeType":"183","messageId":"184","endLine":119,"endColumn":187},{"ruleId":"181","severity":1,"message":"182","line":34,"column":41,"nodeType":"183","messageId":"184","endLine":34,"endColumn":43},{"ruleId":"173","severity":1,"message":"196","line":107,"column":7,"nodeType":"175","endLine":107,"endColumn":23,"suggestions":"197"},{"ruleId":"181","severity":1,"message":"182","line":177,"column":42,"nodeType":"183","messageId":"184","endLine":177,"endColumn":44},{"ruleId":"181","severity":1,"message":"182","line":85,"column":53,"nodeType":"183","messageId":"184","endLine":85,"endColumn":55},{"ruleId":"181","severity":1,"message":"182","line":92,"column":28,"nodeType":"183","messageId":"184","endLine":92,"endColumn":30},{"ruleId":"181","severity":1,"message":"182","line":34,"column":47,"nodeType":"183","messageId":"184","endLine":34,"endColumn":49},{"ruleId":"177","severity":1,"message":"198","line":17,"column":8,"nodeType":"179","messageId":"180","endLine":17,"endColumn":13},{"ruleId":"177","severity":1,"message":"199","line":27,"column":37,"nodeType":"179","messageId":"180","endLine":27,"endColumn":42},{"ruleId":"200","severity":1,"message":"201","line":76,"column":13,"nodeType":"202","messageId":"184","endLine":76,"endColumn":21},{"ruleId":"181","severity":1,"message":"182","line":132,"column":36,"nodeType":"183","messageId":"184","endLine":132,"endColumn":38},{"ruleId":"181","severity":1,"message":"182","line":140,"column":20,"nodeType":"183","messageId":"184","endLine":140,"endColumn":22},{"ruleId":"169","replacedBy":"203"},{"ruleId":"171","replacedBy":"204"},"no-native-reassign",["205"],"no-negated-in-lhs",["206"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'getMails'. Either include them or remove the dependency array.","ArrayExpression",["207"],"no-unused-vars","'firebaseApp' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'EmailIcon' is defined but never used.","'WatchLaterIcon' is defined but never used.","'CheckCircleIcon' is defined but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'history' and 'selectedMail'. Either include them or remove the dependency array.",["208"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'NoteIcon' is defined but never used.","'user' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'docName'. Either include it or remove the dependency array.",["209"],"'axios' is defined but never used.","'watch' is assigned a value but never used.","no-dupe-keys","Duplicate key 'redirect'.","ObjectExpression",["205"],["206"],"no-global-assign","no-unsafe-negation",{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},"Update the dependencies array to be: [selectedSideBarItem, selectedLabelItem, dispatch, getMails]",{"range":"216","text":"217"},"Update the dependencies array to be: [history, selectedMail]",{"range":"218","text":"219"},"Update the dependencies array to be: [docName, recipient_mail]",{"range":"220","text":"221"},[2912,2951],"[selectedSideBarItem, selectedLabelItem, dispatch, getMails]",[2229,2231],"[history, selectedMail]",[3810,3826],"[docName, recipient_mail]"]